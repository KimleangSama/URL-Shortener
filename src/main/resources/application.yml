databaseUrl: ${BATCH_DATASOURCE_URL:postgresql://localhost:6432/demo}
server:
  port: 8080
spring:
  application:
    name: URL-Shortener
  data:
    r2dbc:
      repositories:
        enabled: true
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:rabbitmq}
    password: ${RABBITMQ_PASSWORD:rabbitmq}

queue.url-shortener:
  name: url-shortener
  exchange-name: url-shortener-exchange
  routing-key: url-shortener-routing-key
  durable: true
  auto-delete: false

spring.r2dbc:
  url: r2dbc:${databaseUrl}
  username: ${BATCH_DATABASE_USERNAME:postgres}
  password: ${BATCH_DATABASE_PASSWORD:postgres}
  pool:
    enabled: true # Requires r2dbc-pool
    initial-size: 5
    min-idle: 5
    max-size: 20
    max-idle-time: 10m
    max-life-time: 45m
    validation-query: SELECT 1

# REF: https://github.com/brettwooldridge/HikariCP?tab=readme-ov-file#gear-configuration-knobs-baby
# Time in hikari is in millisecond
spring.datasource.hikari:
  jdbc-url: jdbc:${databaseUrl}
  driver-class-name: org.postgresql.Driver
  username: ${BATCH_DATABASE_USERNAME:postgres}
  password: ${BATCH_DATABASE_PASSWORD:postgres}
  pool-name: SpringBootHikariCP
  maximum-pool-size: 20
  minimum-idle: 5
  idle-timeout: 600000 # 10min
  max-lifetime: 2700000 # 45min
  initialization-fail-timeout: 0

spring.data.redis:
  password: ${REDIS_PASSWORD:redispassword}
  sentinel:
    master: mymaster
    nodes: ${REDIS_SENTINEL_NODES:localhost:26379,localhost:26380,localhost:26381}
  timeout: 30000ms
  lettuce:
    pool:
      enabled: true
      max-active: 20
      max-idle: 20
      min-idle: 5
    shutdown-timeout: 200ms

management:
  endpoints:
    web:
      exposure:
        include: info, health, prometheus, metrics
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_TRACING_ENDPOINT:"http://localhost:9411/api/v2/spans"}
  endpoint:
    health:
      show-details: always
  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
  tracing:
    sampling:
      probability: 1.0
    enabled: true

logging:
  pattern:
    correlation: '[${spring.application.name:},%X{traceId:-},%X{spanId:-}] '
  level:
    com.keakimleang.urlshortener: TRACE
    com.github.loki4j: DEBUG

load.test.enabled: ${LOAD_TEST_ENABLED:true}
logging.loki.url: ${LOKI_URL:http://localhost:3100/loki/api/v1/push}