services:
  postgres:
    image: postgres:17.6
    container_name: postgres
    restart: on-failure
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-demo}
      TZ: Asia/Phnom_Penh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB:-demo} -U ${POSTGRES_USER:-postgres}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    command: >
      postgres 
        -c shared_preload_libraries=pg_stat_statements 
        -c pg_stat_statements.track=all 
        -c max_connections=50
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.1
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_URI: postgres:5432/demo?sslmode=disable
      DATA_SOURCE_USER: postgres
      DATA_SOURCE_PASS: postgres
      TZ: Asia/Phnom_Penh
    command:
      - "--collector.postmaster"
      - "--collector.process_idle"
      - "--collector.long_running_transactions"
      - "--collector.stat_statements"
    depends_on:
      prometheus:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: unless-stopped
  pgbouncer-webflux:
    image: edoburu/pgbouncer:latest
    container_name: pgbouncer-webflux
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "6432:6432"
    environment:
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-demo}
    volumes:
      - ./docker/pgbouncer/pgbouncer-webflux.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./docker/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
  pgbouncer-webmvc:
    image: edoburu/pgbouncer:latest
    container_name: pgbouncer-webmvc
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "6433:6433"
    environment:
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-demo}
    volumes:
      - ./docker/pgbouncer/pgbouncer-webmvc.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./docker/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
  redis-exporter:
    image: oliver006/redis_exporter:alpine
    container_name: redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis-master:6379
      - REDIS_PASSWORD=redispassword
  redis-master:
    container_name: redis-master
    image: 'bitnami/redis:latest'
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=redispassword
    command: /opt/bitnami/scripts/redis/run.sh --maxmemory 1024mb
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis-master:/bitnami/redis
  redis-slave:
    container_name: redis-slave
    image: 'bitnami/redis:latest'
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis-master
      - REDIS_PASSWORD=redispassword
      - REDIS_MASTER_PASSWORD=redispassword
    ports:
      - "6380:6379"
    volumes:
      - ./data/redis-slave:/bitnami/redis
  redis-sentinel-1:
    image: 'bitnami/redis-sentinel:latest'
    container_name: sentinel-1
    environment:
      - REDIS_MASTER_SET=mymaster
      - REDIS_MASTER_HOST=127.0.0.1
      - REDIS_MASTER_PASSWORD=redispassword
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
    depends_on:
      - redis-master
      - redis-slave
    ports:
      - "26379:26379"
  redis-sentinel-2:
    image: 'bitnami/redis-sentinel:latest'
    container_name: sentinel-2
    environment:
      - REDIS_MASTER_SET=mymaster
      - REDIS_MASTER_HOST=127.0.0.1
      - REDIS_MASTER_PASSWORD=redispassword
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
    depends_on:
      - redis-master
      - redis-slave
    ports:
      - "26380:26379"
  redis-sentinel-3:
    image: 'bitnami/redis-sentinel:latest'
    container_name: sentinel-3
    environment:
      - REDIS_MASTER_SET=mymaster
      - REDIS_MASTER_HOST=127.0.0.1
      - REDIS_MASTER_PASSWORD=redispassword
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
    depends_on:
      - redis-master
      - redis-slave
    ports:
      - "26381:26379"
  rabbitmq:
    image: rabbitmq:4.1.3-management-alpine
    container_name: rabbitmq
    restart: on-failure
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-rabbitmq}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-rabbitmq}

  minio:
    image: bitnami/minio:2025.4.22
    container_name: minio
    restart: on-failure
    command: server /data --console-address :9001
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password123
#      MINIO_BROWSER: "off"
      MINIO_PROMETHEUS_AUTH_TYPE: public
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Console UI
    volumes:
      - ./data/minio:/data
  loki:
    image: grafana/loki:3.5.2
    container_name: loki
    restart: on-failure
    command: [ "-config.file=/etc/loki/config.yaml", "-config.expand-env=true" ]
    volumes:
      - ./docker/mon/loki/config.yaml:/etc/loki/config.yaml
      - ./data/loki:/loki
    ports:
      - "3100:3100"
    depends_on:
      - minio
  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: prometheus
    restart: on-failure
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/mon/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
  tempo:
    image: grafana/tempo:2.8.2
    container_name: tempo
    restart: on-failure
    command: [ "-config.file=/etc/tempo.yaml", "-target=all" ]
    volumes:
      - ./docker/mon/tempo/tempo.yml:/etc/tempo.yaml
      - ./data/tempo:/tmp/tempo
    ports:
      - "9411:9411" # zipkin
      - "4317:4317" # OTLP gRPC
  tempo-query:
    image: grafana/tempo-query:2.8.2
    container_name: tempo-query
    environment:
      - TEMPO_SERVER=http://tempo:3200
    ports:
      - "16686:16686"
  pyroscope:
    image: grafana/pyroscope:1.14.0
    container_name: pyroscope
    restart: on-failure
    command: [ "-config.file=/etc/pyroscope/config.yaml" ]
    volumes:
      - ./docker/mon/pyroscope/config.yaml:/etc/pyroscope/config.yaml
      - ./data/pyroscope:/var/lib/pyroscope
    ports:
      - "4040:4040"
  grafana:
    image: grafana/grafana:12.1.1
    container_name: grafana
    restart: on-failure
    volumes:
      - ./docker/mon/grafana:/etc/grafana/provisioning/datasources
      - ./data/grafana:/var/lib/grafana
    ports:
      - "3000:3000"